// 邱梓钿: 重构撤销重做和回溯代码，使用有向无环图实现历史记录操作
import { writable, get } from 'svelte/store';

export const branchCount = writable(0);       // 当前分支数
export const canUndo = writable(false);       // 是否可以撤销
export const canRedo = writable(false);       // 是否可以回退

// SudokuNode类
class SudokuNode {
    constructor(grid, parent = null) {
        this.grid = grid.map(row => [...row]);  // 深拷贝棋盘
        this.children = [];  // 子节点
        this.parent = parent;  // 父节点
    }
}

// SudokuDAG类
function createHistory() {
    let root = null;  // 根节点
    let current = null;  // 当前节点
    let branchPoints = [];  // 分支点栈

    // 初始化初始状态
    function reset(grid) {
        root = new SudokuNode(grid);
        current = root;
        branchPoints = [];
        branchCount.set(0);
        canUndo.set(false);
        canRedo.set(false);
    }

    // 添加新状态
    function addState(row, col, value) {
        const newGrid = current.grid.map(row => [...row]);
        newGrid[row][col] = value;
        const newNode = new SudokuNode(newGrid, current);
        current.children.push(newNode);
        current = newNode;
        canUndo.set(true);
        canRedo.set(false);
    }

    // 标记分支点
    function markBranch() {
        branchPoints.push(current);
        branchCount.update(n => n + 1);
    }

    // 撤销操作
    function undo() {
        if (current.parent) {
            if (branchPoints.includes(current.parent)) {
                branchCount.update(n => n - 1);
                branchPoints = branchPoints.filter(point => point !== current.parent);
            }
            current = current.parent;
            canRedo.set(true);
            if (!current.parent) {
                canUndo.set(false);
            }
        } else {
            canUndo.set(false);
        }
    }

    // 重做操作
    function redo() {
        if (current.children.length > 0) {
            current = current.children[current.children.length - 1];
            canUndo.set(true);
            if (current.children.length === 0) {
                canRedo.set(false);
            }
        } else {
            canRedo.set(false);
        }
    }

    // 回溯到上一个分支点
    function backtrack() {
        if (get(branchCount) > 0) {
            const branchPoint = branchPoints.pop();
            current = branchPoint;
            branchCount.update(n => n - 1);
            canUndo.set(true);
            if (current.children.length === 0) {
                canRedo.set(false);
            }
        } else {
            console.log("No branches to backtrack to.");
        }
    }

    // 获取当前棋盘状态
    function getCurrentGrid() {
        return current.grid;
    }


    return {
        reset,
        addState,
        markBranch,
        undo,
        redo,
        backtrack,
        getCurrentGrid
    };
}

export const history = createHistory();
