import { BOX_SIZE, SUDOKU_SIZE } from '@sudoku/constants';
import { decodeSencode, encodeSudoku } from '@sudoku/sencode';
import { generateSudoku, solveManagement } from '@sudoku/sudoku';
import { derived, writable } from 'svelte/store';
import { hints } from './hints';
// 邱梓钿：导入模块
import { candidates } from './candidates';
import { history, savedGridStack } from './history';

// 邱梓钿：添加无解判断
export const hasSolution = writable(true);

function createGrid() {
	const grid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	return {
		subscribe: grid.subscribe,

		generate(difficulty) {
			grid.set(generateSudoku(difficulty));
		},

		decodeSencode(sencode) {
			grid.set(decodeSencode(sencode));
		},

		get(gridStore, x, y) {
			return gridStore[y][x];
		},

		getSencode(gridStore) {
			return encodeSudoku(gridStore);
		},
	};
}

export const grid = createGrid();


function createUserGrid() {
	const userGrid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	grid.subscribe($grid => {
		let newGrid = [];

		for (let y = 0; y < SUDOKU_SIZE; y++) {
			newGrid[y] = [];
			for (let x = 0; x < SUDOKU_SIZE; x++) {
				newGrid[y][x] = $grid[y][x];
			}
		}

		userGrid.set(newGrid);
	});

	return {
		subscribe: userGrid.subscribe,

		set: (pos, value, updateHistory = true) => {
			userGrid.update($userGrid => {
				if (updateHistory) {
					// 邱梓钿：添加历史记录
					history.slice(0, history.getHistoryIndex() + 1);
					history.pushHistory({ pos: pos, value: $userGrid[pos.y][pos.x] });
				}

				$userGrid[pos.y][pos.x] = value;
				return $userGrid;
			});
		},

		// 邱梓钿：修改为按照候选值的数量来应用提示
		applyHint: (switchHint = true) => {
			console.log('applyHint');
			let maxCandidateCount = hints.getHint();
			if (switchHint) {
				maxCandidateCount = hints.switchHint();
			}
			candidates.reset();
			if (maxCandidateCount === 0) {
				return;
			}
			userGrid.update($userGrid => {
				// const solvedSudoku = solveSudoku($userGrid);
				const sm= new solveManagement();//王舒航&郭集河：修改为solveManagement类解法
				const [solvedSudoku,list] = sm.solveFrame($userGrid,2);//王舒航&郭集河：修改为solveManagement类解法，并且加上用到的策略列表

				// const solvedSudoku = {
				// 	1: [
				// 		[0, 0, [5]],
				// 		[1, 2, [3]]
				// 	],
				// 	2: [
				// 		[0, 1, [1, 2]],
				// 		[2, 2, [4, 6]]
				// 	],
				// 	3: [
				// 		[3, 3, [7, 8, 9]]
				// 	]
				// };
				if (Object.keys(solvedSudoku).length === 0) {
					hasSolution.set(false);
					hints.switchHint(true)
				}
				else {
					hasSolution.set(true);
				}
				// Iterate over each solution
				for (const [candidateCount, solutions] of Object.entries(solvedSudoku)) {
					if (candidateCount <= maxCandidateCount) {
						for (const solution of solutions) {
							const [row, col, candidateValues] = solution;
							candidateValues.forEach(candidate => {
								candidates.add({ x: col, y: row }, candidate);
							});
						}
					}
				}
				return $userGrid;
			});
		},

		// 邱梓钿：添加撤销和撤回撤销的功能
		undo: () => {
			const historyIndex = history.getHistoryIndex();
			if (historyIndex > -1) {
				userGrid.update($userGrid => {
					const { pos, value } = history.getHistory(historyIndex);
					if (historyIndex + 1 < history.getHistoryLength()) {
						history.setHistory(historyIndex + 1, { pos: pos, value: $userGrid[pos.y][pos.x] });
					} else {
						history.pushHistory({ pos: pos, value: $userGrid[pos.y][pos.x] });
					}
					history.setHistoryIndex(historyIndex - 1);
					$userGrid[pos.y][pos.x] = value;
					return $userGrid;
				})
			}
		},

		redo: () => {
			const historyIndex = history.getHistoryIndex();
			if (historyIndex < history.getHistoryLength() - 2) {
				userGrid.update($userGrid => {
					history.setHistoryIndex(historyIndex + 1);
					const { pos, value } = history.getHistory(historyIndex + 2);
					const valueOld = $userGrid[pos.y][pos.x];
					history.setHistory(history.getHistoryIndex(), { pos: pos, value: valueOld });
					$userGrid[pos.y][pos.x] = value;
					return $userGrid;
				});
				
			}
		},
		
		// 邱梓钿：增加回溯和撤销回退功能的联动
		// 常鹏：保存当前网格到栈
		saveGrid: () => {
			userGrid.subscribe($userGrid => {
				// 使用 `update` 向栈中推入当前网格
				savedGridStack.update(stack => {
					const newStack = [...stack, [JSON.parse(JSON.stringify($userGrid)), history.getHistory(), history.getHistoryIndex()]];
					return newStack;
				});
			})();
		},

		// 常鹏：从栈中加载并设置最新保存的网格
		recallGrid: () => {
			savedGridStack.update(stack => {
				if (stack.length > 0) {
					const latestState = stack[stack.length - 1]; // 获取栈顶元素
					const [latestGrid, latestHistory, latestHistoryIndex] = latestState; 
					userGrid.set(latestGrid); // 设置当前网格
					history.setHistory(latestHistory);
					history.setHistoryIndex(latestHistoryIndex);
					stack.pop(); // 移除栈顶元素
					return [...stack]; // 返回更新后的栈
				} else {
					console.warn('No grid to load.');
					return stack; // 如果栈为空，直接返回
				}
			});
		},
	};
}

// 常鹏：当前使用的表格
export const userGrid = createUserGrid();

export const invalidCells = derived(userGrid, $userGrid => {
	const _invalidCells = [];

	const addInvalid = (x, y) => {
		const xy = x + ',' + y;
		if (!_invalidCells.includes(xy)) _invalidCells.push(xy);
	};

	for (let y = 0; y < SUDOKU_SIZE; y++) {
		for (let x = 0; x < SUDOKU_SIZE; x++) {

			const value = $userGrid[y][x];

			if (value) {
				for (let i = 0; i < SUDOKU_SIZE; i++) {
					// Check the row
					if (i !== x && $userGrid[y][i] === value) {
						addInvalid(x, y);
					}

					// Check the column
					if (i !== y && $userGrid[i][x] === value) {
						addInvalid(x, i);
					}
				}

				// Check the box
				const startY = Math.floor(y / BOX_SIZE) * BOX_SIZE;
				const endY = startY + BOX_SIZE;
				const startX = Math.floor(x / BOX_SIZE) * BOX_SIZE;
				const endX = startX + BOX_SIZE;
				for (let row = startY; row < endY; row++) {
					for (let col = startX; col < endX; col++) {
						if (row !== y && col !== x && $userGrid[row][col] === value) {
							addInvalid(col, row);
						}
					}
				}
			}

		}
	}

	return _invalidCells;
}, []);
