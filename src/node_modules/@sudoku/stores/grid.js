import { BOX_SIZE, SUDOKU_SIZE } from '@sudoku/constants';
import { decodeSencode, encodeSudoku } from '@sudoku/sencode';
import { generateSudoku, solveSudoku } from '@sudoku/sudoku';
import { derived, writable } from 'svelte/store';
import { hints } from './hints';

export const savedGridStack = writable([]);// 常鹏：保存的网格
export const branchStepStack = writable([]);//常鹏：分支对应的undo的idx


function createGrid() {
	const grid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	return {
		subscribe: grid.subscribe,

		generate(difficulty) {
			grid.set(generateSudoku(difficulty));
		},

		decodeSencode(sencode) {
			grid.set(decodeSencode(sencode));
		},

		get(gridStore, x, y) {
			return gridStore[y][x];
		},

		getSencode(gridStore) {
			return encodeSudoku(gridStore);
		},
	};
}

export const grid = createGrid();


function createUserGrid() {
	const userGrid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	grid.subscribe($grid => {
		let newGrid = [];

		for (let y = 0; y < SUDOKU_SIZE; y++) {
			newGrid[y] = [];
			for (let x = 0; x < SUDOKU_SIZE; x++) {
				newGrid[y][x] = $grid[y][x];
			}
		}

		userGrid.set(newGrid);
	});

	return {
		subscribe: userGrid.subscribe,

		set: (pos, value) => {
			userGrid.update($userGrid => {
				$userGrid[pos.y][pos.x] = value;
				return $userGrid;
			});
		},

		applyHint: (pos) => {
			hints.useHint();
			userGrid.update($userGrid => {
				const solvedSudoku = solveSudoku($userGrid);
				$userGrid[pos.y][pos.x] = solvedSudoku[pos.y][pos.x];
				return $userGrid;
			});
		},

		// 常鹏：保存当前网格到栈
		saveGrid: (stepIdx) => {
			userGrid.subscribe($userGrid => {
				// 使用 `update` 向栈中推入当前网格
				savedGridStack.update(stack => {
					const newStack = [...stack, JSON.parse(JSON.stringify($userGrid))];
					return newStack;
				});
			})();

			branchStepStack.update(stack => {
				return [...stack, stepIdx]; // 将新的 stepidx 添加到栈顶
				});
		},

		// 常鹏：从栈中加载并设置最新保存的网格
		recallGrid: () => {
			savedGridStack.update(stack => {
				if (stack.length > 0) {
					const latestGrid = stack[stack.length - 1]; // 获取栈顶元素
					userGrid.set(latestGrid); // 设置当前网格
					stack.pop(); // 移除栈顶元素
					return [...stack]; // 返回更新后的栈
				} else {
					console.warn('No grid to load.');
					return stack; // 如果栈为空，直接返回
				}
			});
			
			let stepIdx = -1;//回溯对应的undo的idx
			branchStepStack.update(stack => {
				if (stack.length > 0) {
					stepIdx = stack[stack.length - 1]; // 获取栈顶元素
					stack.pop(); // 移除栈顶元素
					return [...stack]; // 返回更新后的栈
				} else {
					console.warn('No branch step to load.');
					return stack; // 如果栈为空，直接返回
				}
			})
			return stepIdx;
		},

		// 常鹏：获取栈的长度
		stackSize: () => {
			let size = 0;
			branchStepStack.subscribe(stack => {
				size = stack.length;
			})();
			return size;
		},
	};
}

// 常鹏：当前使用的表格
export const userGrid = createUserGrid();

export const invalidCells = derived(userGrid, $userGrid => {
	const _invalidCells = [];

	const addInvalid = (x, y) => {
		const xy = x + ',' + y;
		if (!_invalidCells.includes(xy)) _invalidCells.push(xy);
	};

	for (let y = 0; y < SUDOKU_SIZE; y++) {
		for (let x = 0; x < SUDOKU_SIZE; x++) {

			const value = $userGrid[y][x];

			if (value) {
				for (let i = 0; i < SUDOKU_SIZE; i++) {
					// Check the row
					if (i !== x && $userGrid[y][i] === value) {
						addInvalid(x, y);
					}

					// Check the column
					if (i !== y && $userGrid[i][x] === value) {
						addInvalid(x, i);
					}
				}

				// Check the box
				const startY = Math.floor(y / BOX_SIZE) * BOX_SIZE;
				const endY = startY + BOX_SIZE;
				const startX = Math.floor(x / BOX_SIZE) * BOX_SIZE;
				const endX = startX + BOX_SIZE;
				for (let row = startY; row < endY; row++) {
					for (let col = startX; col < endX; col++) {
						if (row !== y && col !== x && $userGrid[row][col] === value) {
							addInvalid(col, row);
						}
					}
				}
			}

		}
	}

	return _invalidCells;
}, []);
